sources:
  metrics:
    type: "file"
    include:
      - /vector/logs/noc_logs.log
  
  
transforms:
  parse_log:
    type: remap
    inputs:
      - metrics
    source: '''
      # Parse the JSON string in the `message` field
      parsed_json, err = parse_json(.message)
      if err != null {
          log("failed to parse JSON: #{err}", rate_limit_secs: 0)
      }
      
      # Extract metrics from the parsed JSON
      metrics = parsed_json.metrics
      
      if .metricFamily == "NormalizedPortInfo" {
          # Assign the metrics to individual fields
          .port_availability = metrics.Availability
          .port_bitsIn = metrics.BitsIn
          .port_bitsPerSecondIn = metrics.BitsPerSecondIn
          .port_bitsOut = metrics.BitsOut
          .port_bitsPerSecondOut = metrics.BitsPerSecondOut
          .port_utilizationIn = metrics.UtilizationIn
          .port_utilizationOut = metrics.UtilizationOut
      } else if .metricFamily == "NormalizedMemoryInfo" {
          # Assign the metrics to individual fields
          .CPUMemoryKernelUsage = metrics.CPUMemoryKernelUsage
          .Free = metrics.Free
          .MemoryCommitted = metrics.MemoryCommitted
          .Total = metrics.Total
          .Used = metrics.Used
          .Utilization = metrics.Utilization
      } else if .metricFamily == "NormalizedCPUInfo" {
          # Assign the metrics to individual fields
          .cpuBusyPercInInterruptCpmCPUMonInterval = metrics.cpuBusyPercInInterruptCpmCPUMonInterval
          .cpuBusyPercInLastCpmCPUMonInterval = metrics.cpuBusyPercInLastCpmCPUMonInterval
          .cpuIdleUtilization = metrics.cpuIdleUtilization
          .cpuSystemUtilization = metrics.cpuSystemUtilization
          .cpuUsageMonitoringInterval = metrics.cpuUsageMonitoringInterval
          .cpuUserUtilization = metrics.cpuUserUtilization
          .CPUUtilizationAverage5Seconds = metrics.CPUUtilizationAverage5Seconds
          .CPUUtilizationLastMin = metrics.CPUUtilizationLastMin
          .SysCPULoadLast5Minutes = metrics.SysCPULoadLast5Minutes
          .Utilization = metrics.Utilization
      } else if .metricFamily == "NormalizedReachabilityInfo" {
          # Assign the metrics to individual fields
          .AvgResponse = metrics.AvgResponse
          .Reachability = metrics.Reachability
      } else if .metricFamily == "NormalizedAvailabilityInfo" {
          # Assign the metrics to individual fields
          .AvgResponse = metrics.Availability
          .Reachability = metrics.Reachability
      } else if .metricFamily == "NormalizedPartitionsInfo" {
          # Assign the metrics to individual fields
          .Capacity = metrics.Capacity
          .Free = metrics.Free
          .PercentFree = metrics.PercentFree
          .PercentUsed = metrics.PercentUsed
          .Used = metrics.Used
      } else if .metricFamily == "NormalizedQosClassMapInfo" {
          # Assign the metrics to individual fields
          .AllocatedBandwidth = metrics.AllocatedBandwidth
          .BandwidthEnabled = metrics.BandwidthEnabled
          .BitRateDrops = metrics.BitRateDrops
          .CongestionDiscardedPackets = metrics.CongestionDiscardedPackets
          .DiscardedPackets = metrics.DiscardedPackets
          .DiscardRate = metrics.DiscardRate
          .PctQoSMechanismDiscard = metrics.PctQoSMechanismDiscard
          .PctCongestionDiscard = metrics.PctCongestionDiscard
          .PctDiscard = metrics.PctDiscard
          .PostPolicyBitRate = metrics.PostPolicyBitRate
          .PostPolicyBits = metrics.PostPolicyBits
          .PostPolicyBytes = metrics.PostPolicyBytes
          .PostPolicyPackets = metrics.PostPolicyPackets
          .PostPolicyThroughput = metrics.PostPolicyThroughput
          .PostPolicyUtilization = metrics.PostPolicyUtilization
          .PrePolicyBitRate = metrics.PrePolicyBitRate
          .PrePolicyBits = metrics.PrePolicyBits
          .PrePolicyBytes = metrics.PrePolicyBytes
          .PrePolicyPackets = metrics.PrePolicyPackets
          .PrePolicyThroughput = metrics.PrePolicyThroughput
          .PrePolicyUtilization = metrics.PrePolicyUtilization
          .PriorityEnabled = metrics.PriorityEnabled
          .QoSMechanismDiscardedBits = metrics.QoSMechanismDiscardedBits
          .QoSMechanismDiscardedBytes = metrics.QoSMechanismDiscardedBytes
          .QoSMechanismDiscardedPackets = metrics.QoSMechanismDiscardedPackets
      } else if .metricFamily == "NormalizedVirtualMemoryInfo" {
          # Assign the metrics to individual fields
          .Free = metrics.Free
          .SWAPFree = metrics.SWAPFree
          .SWAPTotal = metrics.SWAPTotal
          .SWAPUsed = metrics.SWAPUsed
          .SWAPUtilization = metrics.SWAPUtilization
          .Total = metrics.Total
          .Used = metrics.Used
          .Utilization = metrics.Utilization
      } 
      
      # Transform the ifAlias field
      if exists(.ifAlias) {
          .ifAlias, err= replace(.ifAlias, " ", "_")
          .ifAlias = replace(.ifAlias, "|", "")
          .ifAlias = replace(.ifAlias, "__", "_")
      }
      
      if exists(.ifDescr) {
          .ifDescr, err= replace(.ifDescr, " ", "_")
          .ifDescr = replace(.ifDescr, "-", "_")
          .ifDescr = replace(.ifDescr, "__", "_")
          .ifDescr = replace(.ifDescr, ":", "_")
      }
      
      # Delete all other fields
      del(.message)
      del(.metrics)
      del(._line)
      del(.componentName)
      del(.cycleTimestampMS)
      del(.dcmID)
      del(.deviceItemID)
      del(.headers)
      del(.message_key)
      del(.metricFamily)
      del(.metricFamilyDisplayName)
      del(.offset)
      del(.partition)
      del(.pollGroupID)
      del(.pollRateMS)
      del(.readTimestampMS)
      del(.source_type)
      del(.itemID)
      del(.tags)
      del(.tenantID)
      del(.version)
      del(.timestamp)
      del(.topic)
    '''
  
sinks:
  prometheus_exporter:
    type: prometheus_exporter
    inputs:
      - parse_log
    address: 0.0.0.0:9090
